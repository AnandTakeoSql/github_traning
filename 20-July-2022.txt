Math Function 
 1 Round ()  
            -> Round function is a number to a specified number  decimal places


Syntax

select round(20.01);
select round(20.45);
select round(20.49);
select round(20.50);
select round(20.99);

select round(20.99, 1);
select round(20.99, 2);


select round(20.99, -1);
select round(20.99, -2);


select round(20.99, -1);  
First section - Integer Value 
Second section - Decimal 

+1   -> Belongs round of after decimal consideration
-1 -> Belongs Integer consider 

## Truncate Function 
                     -> To specified number of decimal places 


select truncate(25.22,1);

select truncate(25.22,2);

select truncate(25.22,3); 


select truncate(25.987654321, 0); 

select truncate(25.987654321, -1); 

select truncate(123456.78, -1);    
select truncate(123456.78, -2);  
select truncate(123456.78, -3); 
select truncate(123456.78, -4);  

select truncate(1234.12,0.5);

 Diff b/n truncate and round 

select truncate( 1.9876,2), round(1.9876,2);

As clearly shown in  the o/p of the truncate function trims the decimal places while
round function  performs the rounding


## SQRT 
         -> Return the square

select sqrt(4);
select sqrt(5);
SELECT SQRT(9);


SELECT SQRT(sqrt(27));


SELECT power(2,3); 

SELECT  POWER(27, 1/3);

# CELING 
  ->  Return the smallest integer value that is greater than or equal to a number 
select ceiling(25);
select ceiling(25.02);
select ceiling(25.66);
select ceiling(25.99);


# Gratest   
                      Returns the greatest value of the list of the arguments  

select greatest(3,12,6,78,45);    


# Least 
     Returns the smallest value of the list of the arguments 

select least(3,12,6,78,45); 


Like  
     -> Just like matching condition/ seraching  
  select * from employees where first_name like 'S%';

select * from employees where first_name like '%s';

select * from employees where last_name like '%in%';
in -> middle
in -> starting
in -> ending position


SubQuery ->
             Nested  query 
##   To find o/p of employee table whose employee greater than avg salary

case statement 
create table if not exists Emp_info
(id int,
name  varchar(20),
gender char(2)
);


insert into emp_info value (1, 'Anjali', 'F');
insert into emp_info value (2, 'Deepak', 'M');
insert into emp_info values (3,'AAAAA', 'T');

syntax

select id, name ,gender ,
case when gender = 'F'  then 'Female'
     when gender ='M'  then  'Male'
     else 'Trans' end gender
from emp_info;


select salary from employees order by salary desc;
sal > 20k   -outsanding Performance
sal > 15 ->   Good Performance
sal -> 10k -> Avergae
sal -> below 10 k poor performance ;


create table subject(
sub_id int ,
student_name varchar(20),
sub_name varchar(20),



select sub_id, student_name ,
sub_name , marks,
case when marks > 90 then  'outstanding performance' 
      when     marks > 70 then 'Good Performance' 
      when     marks > 50  then'avergae performance' 
      when marks <50  then  'fail'
else  'Not applicable grade'
end  performance_report
from subject;
marks  int
);

insert into subject values 
(1, 'Jack', 'Maths', 75),
(2, 'Jack', 'Maths' ,98),
(3, 'Jack', 'Maths' ,65),
(4, 'Jack', 'Maths' ,55),
(5, 'Jack', 'Maths' ,25),
(6, 'Jack', 'Maths' ,40);


;


Co-rreleate sub query 
                     -> A co-rreleated subquery that contains a ref to a table
 (in parent query) that also appears  in the  outer query 

# To find the query   all emp who earn more than avg salary in their department


select  first_name , last_name,  department_id , salary
from employees e
where salary > (select  avg(salary) from employees
where department_id = e.department_id)
 




        



 



